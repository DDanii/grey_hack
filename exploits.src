display_file = function(f)
	return f.name
end function

display_exploit_line = function(l)
	if l.indexOf("0x") == 0 then
		return globals.prefix + "<b>" + l + "</b>"
	end if
	return "  " + l
end function

process_select_from_list = function(shell, label, values, display, can_select)
    page = 0
    page_size = 40
	if can_select then page_size = 10

    while true
        clear_screen()
		print(label)
		print()
		
        i = (page * page_size)
        j = i + page_size
        page_values = values[i:j]
        index = 0
        for pv in page_values
			if can_select then print("" + index + " " + display(pv)) else print(display(pv))
            index = index + 1
        end for

        key = user_input("[wasd]: ", false, true)
        if key == "x" then return -1
		if key == "q" then return -1
        if key == "s" then return -2
		if key == "w" then return -3
        if key == "d" then
            page = page + 1
            continue
		else if key == "a" then
            if page > 0 then page = page - 1
            continue
        else if can_select and key >= "0" and key <= "9" then
            i = (page * page_size) + key.to_int
            if i >= 0 and i < values.len then return i
        end if
    end while
end function

process_exploit_list = function(shell, exploits)
    f = shell.host_computer.File(exploits)
    if not f then
        print("No exploits found.")
    end if

    while true
        folders = f.get_folders()
		label = "Exploits - " + (f.path.split("/")[-1:].join("/"))
        k = process_select_from_list(shell, label ,folders, @display_file, true)

        if k == -2 then
            f = f.parent
            if f.path.indexOf(exploits) == null then f = shell.host_computer.File(exploits)
		else if k == -3 then
			f = shell.host_computer.File(exploits)
        else if k < 0 then
			return
        else
            f = folders[k]
            has_exploits = shell.host_computer.File(f.path + "/exploits.txt")
            if has_exploits then
				label = "Exploits - " + (f.path.split("/")[-2:].join("/"))
				k = process_select_from_list(shell, label, has_exploits.get_content().split("\n"), @display_exploit_line, false)
				if k == -2 then
            		f = f.parent
            		if f.path.indexOf(exploits) == null then f = shell.host_computer.File(exploits)
				else if k == -3 then
					f = shell.host_computer.File(exploits)
				else if k < 0 then
					return
				end if
            end if
        end if

    end while
end function

prefix = ""
if params.len == 0 then exit("Missing parameter")
if params.len > 1 then prefix = params[1]

process_exploit_list(get_shell(), params[0])
