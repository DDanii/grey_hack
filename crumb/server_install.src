rsshd_installer_jump = function(shell)
    shell_script = [
        "result1 = include_lib(""/lib/librshell.so"")",
        "result2 = include_lib(""/lib/metaxploit.so"")",
        "goc = get_custom_object()",
        "goc.librshell = result1",
        "goc.metaxploit = result2"]

    program = "/home/guest/lr"
    source = program + ".src"
    f = shell.host_computer.File(program)
    if not f then
        f = mkfile(shell, source)
        if not f then return null
        f.set_content(shell_script.join(char(10)))
        error = shell.build(source, parent_path(source))
        f.set_content("")
        f.move(parent_path(f.path), ".null")
        if not error then 
            print(error)
            return null
        end if
    end if

    goc = get_custom_object()
    shell.launch(program)
    return goc

end function

rsshd_installer = function(sh, repo)

    lr = rsshd_installer_jump(sh)

    if lr.hasIndex("librshell") then
        sh.launch("/bin/apt-get", "addrepo " + repo)
        sh.launch("/bin/apt-get", "update")
        sh.launch("/bin/apt-get", "install librshell.so")
        sh.launch("/bin/apt-get", "install metaxploit.so")
        sh.launch("/bin/apt-get", "delrepo " + repo)
        sh.launch("/bin/apt-get", "update")
        lr = rsshd_installer_jump(sh)
    end if

    if not lr.hasIndex("librshell") then exit("Error: Missing librshell.so library in the /lib path or the current folder")
    
    output = lr.librshell.start_service()

    return lr.librshell
end function

update_local = function(sh)
    sh.launch("/bin/apt-get", "update")
    sh.launch("/bin/apt-get", "upgrade")
end function

connect_to_bounce = function(stack, ip, port, user, pass)
    rsh = stack[-1].connect_service(ip, port.to_int, user, pass, "ssh")
    if typeof(rsh) == "string" then exit("Can't connect to " + ip + "(" + rsh + ").") else stack.push(rsh)
    wipe_system_log(stack[-1])
    if stack.len > 2 then wipe_system_log(stack[-2]) // delete routed entries
end function

connect_to_bounces = function(stack, file)
    f = stack[-1].host_computer.File(file)
    if not f then exit("Can't open connection file.")
    connections = f.get_content().split("\n")
    for c in connections
        args = c.split(" ")
        if args.len < 3 then continue
        if args[0] != "ssh" then continue
        args = parse_ssh_parameters(c)
        if not args then exit("Invalid connection string.")
        connect_to_bounce(stack, args[0], args[1], args[2], args[3])
    end for
end function

signal_facade = function(sh, args)
    if (args.len == 0) then return
    mkfile(sh, args[0])
end function