search = function(target, current)
	level = target.split("/")
	cursor = 0
	while cursor < level.len
		if level[cursor] == ".." then
			current = current.parent
		else
			folders = current.get_folders
			changed = false
			
			for a in folders
				if a.name == level[cursor] then
					if cursor + 1 >= level.len then
						return a
					end if
					current = a
					changed = true
					break
				end if
			end for
			
			if not changed then
				files = current.get_files
				for b in files
					if b.name == level[cursor] then
						return b
					end if
				end for
			end if
			
		end if
		cursor = cursor + 1
	end while
	
	return null
end function

if params.len < 4 then exit("<b>Usage: " + program_path.split("/")[-1] + " [ip_address] [port] [memory] [value]</b>")

address = params[0]
port = params[1].to_int
memory = params[2]
values = params[3]
extra_args = ""
if params.len > 4 then
	extra_args = params[4]
end if

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
    metaxploit = include_lib(current_path + "/metaxploit.so")
	if not metaxploit then
		exit("Missing metaxploit.so!")
	end if
end if

net_session = metaxploit.net_use( address, port )

if not net_session then
	exit("Can't connect!")
end if

metaLib = net_session.dump_lib
result = metaLib.overflow(memory, values, extra_args)
if typeof(result) == "shell" then
	result.start_terminal
else if typeof(result) == "computer" then
	file = result.File("/etc/passwd")
	print(file.get_content)
else if typeof(result) == "file" then
	print(result.path)
	if extra_args != "" then
		t = search(extra_args, result)
		if t then
			if t.is_folder then
				folders = t.get_folders
				for f in folders
					print(f.name)
				end for
				files = t.get_files
				for f in files
					print(f.name)
				end for
			else
				print(t.get_content)
			end if
		end if
		if extra_args != "" then
			
			if t then
				
			end if
		else
			folders = result.get_folders

		end if
	else
		if not result.is_folder then
			print(result.get_content)
		end if
	end if
else
	print(result)
end if