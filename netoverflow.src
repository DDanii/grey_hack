search = function(target, current)
	level = target.split("/")
	cursor = 0
	
	if not current.is_folder then
		current = current.parent
	end if

	while cursor < level.len
		if level[cursor] == ".." then
			current = current.parent
		else
			folders = current.get_folders
			changed = false
			
			for a in folders
				if a.name == level[cursor] then
					if cursor + 1 >= level.len then
						return a
					end if
					current = a
					changed = true
					break
				end if
			end for
			
			if not changed then
				files = current.get_files
				for b in files
					if b.name == level[cursor] then
						return b
					end if
				end for
			end if
			
		end if
		cursor = cursor + 1
	end while
	
	return null
end function

print_file = function(file)
	if file then
		if file.is_folder then
			folders = file.get_folders
			for f in folders
				print(f.name)
			end for
			files = file.get_files
			for f in files
				print(f.name)
			end for
		else
			print(file.get_content)
		end if
	else
		print("file is null")
	end if	
end function

is_memory = function(v)
	if v then return v.indexOf("0x") == 0 else return false
end function

if params.len < 3 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + program_path.split("/")[-1] + " [ip_address|path] [port] [memory] [value]</b>")

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
    metaxploit = include_lib(current_path + "/metaxploit.so")
	if not metaxploit then
		exit("Missing metaxploit.so!")
	end if
end if

metaLib = null
memory = null
values = null
extra_args = ""

if is_valid_ip(params[0]) then
	offset = 0
	address = params[offset + 0]
	port = 0
	
	if not is_memory(params[offset + 1]) then 
		port = params[offset + 1].to_int
		offset = offset + 1
	end if
	
	net_session = metaxploit.net_use( address, port )

	if not net_session then exit("Can't connect!")
	metaLib = net_session.dump_lib
	memory = params[offset + 1]
	values = params[offset + 2]
	if params.len > offset + 3 then extra_args = params[offset + 3]
else
	metaLib = metaxploit.load(params[0])
	memory = params[1]
	values = params[2]
	if params.len > 3 then extra_args = params[3]
end if

result = metaLib.overflow(memory, values, extra_args)
if typeof(result) == "shell" then
	result.start_terminal
else if typeof(result) == "computer" then
	if extra_args != "" then
		file = result.File(extra_args)
		print(extra_args)
		print_file(file)
	else
		file = result.File("/etc/passwd")
		print("/etc/passwd")
		print(file.get_content)
	end if
else if typeof(result) == "file" then
	print(result.path)
	if extra_args != "" then
		t = search(extra_args, result)
		if t then
			print_file(t)
		end if
	else
		print_file(result)
	end if
else
	print(result)
end if